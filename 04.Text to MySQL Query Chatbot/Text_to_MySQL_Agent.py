from dotenv import load_dotenv
import os
import requests
from langchain_community.utilities import SQLDatabase
from langchain_community.tools.sql_database.tool import QuerySQLDataBaseTool
from langchain_ollama import ChatOllama
from typing import  TypedDict, Annotated
from langgraph.graph import  START, StateGraph
from IPython.display import display, Image
from langchain import hub
from langchain.schema import AIMessage


# Load environment variables from a .env file
load_dotenv('../.env')

##------------------------ LLM connection and MySQL Tools ---------------------------------
# Initialize SQL Database connection
db = SQLDatabase.from_uri("sqlite:///Chinook.db")

# Set up a connection to the LLM (Ollama model)
model = "qwen2.5"  # Alternative model: llama3.2:3b
llm = ChatOllama(model=model, base_url="http://localhost:11434")
response=llm.invoke("Hello").content
print("response-> ",response)

#--------------------- Aplication State or Graph State ----------------------

# Define the application state using a TypedDict structure
class State(TypedDict):
    question: str  # User's question
    query: str  # MySQL query generated by the LLM
    result: str  # MySQL query result
    answer: str  # Final LLM-generated answer

# Retrieve a query prompt template from Langchain hub
query_prompt_template = hub.pull("langchain-ai/sql-query-system-prompt")
#print("query prompt template-> ",query_prompt_template)
#query_prompt_template.messages[0].pretty_print()

#-------------------- Write, Execute and Generate MySQL Response ---------------------------

# Define the structured response format for the MySQL query
# The query key must be a string (str), and it uses Annotated to provide additional metadata.
# The annotation ..., "Syntactically correct and valid SQL query" is a description, but it doesn't affect execution.
class QueryOutput(TypedDict):
    """Generated SQL query"""
    query: Annotated[str, ..., "Syntactically correct and valid SQL query"]

print(QueryOutput({"query": "SELECT * FROM album LIMIT 2"}))
print(QueryOutput.__annotations__)

# NODE -> WRITE QUERY

# Function to generate an SQL query from a user's question
def write_query(state: State):
    """Generate an SQL query to fetch information based on the user's question"""
    prompt = query_prompt_template.invoke({
        "dialect": db.dialect,
        "top_k": 5,
        "table_info": db.get_table_info(),
        "input": state["question"]
    })

    structured_llm = llm.with_structured_output(QueryOutput)
    result = structured_llm.invoke(prompt)

    return {"query": result["query"]}