from dotenv import load_dotenv
import os
import requests
from langchain_community.utilities import SQLDatabase
from langchain_community.tools.sql_database.tool import QuerySQLDataBaseTool
from langchain_ollama import ChatOllama
from typing import  TypedDict, Annotated
from langgraph.graph import  START, StateGraph
from IPython.display import display, Image
from langchain import hub

# Load environment variables from a .env file
load_dotenv('../.env')

# Initialize SQL Database connection
db = SQLDatabase.from_uri("sqlite:///Chinook.db")

# Print available table names in the database
print(db.get_usable_table_names())

# Execute some test queries to inspect the database content
db.run("SELECT * FROM album LIMIT 2")
db.run("SELECT * FROM artist LIMIT 2")
db.run("SELECT * FROM Invoice AS inv JOIN Customer AS c ON inv.CustomerId=c.CustomerId LIMIT 1")

# Set up a connection to the LLM (Ollama model)
model = "qwen2.5"  # Alternative model: llama3.2:3b
llm = ChatOllama(model=model, base_url="http://localhost:11434")
llm.invoke("Hello")

# Define the application state using a TypedDict structure
class State(TypedDict):
    question: str  # User's question
    query: str  # MySQL query generated by the LLM
    result: str  # MySQL query result
    answer: str  # Final LLM-generated answer

# Retrieve a query prompt template from Langchain hub
query_prompt_template = hub.pull("langchain-ai/sql-query-system-prompt")
query_prompt_template.messages[0].pretty_print()

# Define the structured response format for the MySQL query
class QueryOutput(TypedDict):
    """Generated SQL query"""
    query: Annotated[str, ..., "Syntactically correct and valid SQL query"]

# Function to generate an SQL query from a user's question
def write_query(state: State):
    """Generate an SQL query to fetch information based on the user's question"""
    prompt = query_prompt_template.invoke({
        "dialect": db.dialect,
        "top_k": 5,
        "table_info": db.get_table_info(),
        "input": state["question"]
    })

    structured_llm = llm.with_structured_output(QueryOutput)
    result = structured_llm.invoke(prompt)

    return {"query": result["query"]}

# Function to execute a given SQL query and return results
def execute_query(state: State):
    """Execute an SQL query and return the result"""
    query = state["query"]
    execute_query_tool = QuerySQLDataBaseTool(db=db)

    return {"result": execute_query_tool.invoke({"query": query})}

# Function to generate a response based on SQL query results
def generate_answer(state: State):
    """Generate an answer using retrieved information from the database"""
    prompt = (
        "Given the following user question, corresponding SQL query, "
        "and SQL result, answer the user question.\n\n"
        f'Question: {state["question"]}\n'
        f'SQL Query: {state["query"]}\n'
        f'SQL Result: {state["result"]}'
    )

    response = llm.invoke(prompt)

    return {"answer": response.content}

# Example: Ask how many employees are in the database
question = "how many employees are there?"
query = write_query({"question": question})
print(query)

# Execute the generated query
result = execute_query(query)
print(result)

# Combine all information into a state dictionary
state = {"question": question, **query, **result}
print(state)

# Generate and print the final answer
print(generate_answer(state))

# Build the processing graph
graph_builder = StateGraph(State)
graph_builder.add_node("write_query", write_query)
graph_builder.add_node("execute_query", execute_query)
graph_builder.add_node("generate_answer", generate_answer)

# Define the execution flow of the graph
graph_builder.add_edge(START, "write_query")
graph_builder.add_edge("write_query", "execute_query")
graph_builder.add_edge("execute_query", "generate_answer")

# Compile and visualize the graph
graph = graph_builder.compile()
display(Image(graph.get_graph().draw_mermaid_png()))

# Example: Query to list all albums
query = {'question': 'List all the albums'}
for step in graph.stream(query, stream_mode="updates"):
    print(step)

# LangGraph AGENTS: Automating query execution with AI
'''
# Agents can:
# - Query the database multiple times to refine their answer.
# - Recover from errors by detecting failed queries and regenerating them.
# - Answer questions based on both schema structure and database content.
'''

prompt = hub.pull("langchain-ai/sql-agent-system-prompt")
prompt.messages[0].pretty_print()
